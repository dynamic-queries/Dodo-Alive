function dynamics = get_dynamics(num_jl, len_links, mass_links, com_links, mass_toe, spring_stiffness, q2_resting_length, radius_pulley)

% note CoM position in relation to link length not relevent (not
% implemented)

switch num_jl

    case 2
        assert(mass_links(1) == mass_links(2))
        assert(len_links(1) == len_links(2))
        m = mass_links(1);
        l = len_links(1);
        t = mass_toe;
        g = 9.81;
        k = spring_stiffness;
        q2_r = q2_resting_length;
        
        % torque effecting first joint (hip)
        tau_1 = @(q1,q2,q1d,q2d,q1dd,q2dd)( ...
                (1.5*m*l^2 + 0.5*m*l^2*cos(q2)) * q1dd + ...
                (0.25*m*l^2 + 0.25*m*l^2*cos(q2)) * q2dd - ...
                0.5*m*l^2*q1d*q2d*sin(q2) - 0.25*m*l^2*q2d^2*sin(q2) + ...
                1.5*m*g*l*cos(q1) + 0.5*m*g*l*cos(q1+q2) + ...
                (2*t*l^2 + 2*t*l^2*cos(q2)) * q1dd + ...
                (t*l^2 + t*l^2*cos(q2)) * q2dd - ...
                2*t*l^2*q1d*q2d*sin(q2) - t*l^2*q2d^2*sin(q2) + ...
                t*g*l*cos(q1+q2) ...
                );
        
        % torque effecting second joint (knee)
        tau_2 = @(q1,q2,q1d,q2d,q1dd,q2dd)( ...
                (0.25*m*l^2 + 0.25*m*l^2*cos(q2)) * q1dd + ...
                (0.25*m*l^2) * q2dd + ...
                0.25*m*l^2*q1d^2*sin(q2) + 0.25*k*l^2*sin(q2-q2_r) + ...
                0.5*m*g*l*cos(q1+q2) + ...
                (t*l^2 + t*l^2*cos(q2)) * q1dd + ...
                (t*l^2) * q2dd + ...
                t*l^2*q1d^2*sin(q2) + ...
                t*g*l*cos(q1+q2) ...
                );

        % torque effecting third joint (ankle) not relevant because we
        % don't need to control it with a motor
        
        dynamics = {tau_1, tau_2};


    case 3
        % TODO: IMPLEMENT DYNAMICS FOR 3 LINKS + K(t)
        assert(mass_links(1) == mass_links(2))
        assert(mass_links(2) == mass_links(3))      % all link masses same
        assert(len_links(1) == len_links(2))
        assert(len_links(2) == len_links(3))        % all link lengths same
        m = mass_links(1);
        l = len_links(1);
        t = mass_toe;
        g = 9.81;
        k = spring_stiffness;
        q2_r = q2_resting_length;
        r_pulley = radius_pulley;

        % torque effecting first joint (hip)
        tau_1 = @(q1,q2,q3,q1d,q2d,q3d,q1dd,q2dd,q3dd)( ...
                0.5*m*l^2 * ( ...
                    q1dd*(7.5 + 6*cos(q2) + 2*cos(q3) + 2*cos(q2+q3)) + ...
                    q2dd*(3   + 3*cos(q2) + 2*cos(q3) +   cos(q2+q3)) + ...
                    q3dd*(0.5 +               cos(q3) +   cos(q2+q3)) - ...
                    sin(q2)*    (4*q1d^2 + 4*q1d*q2d + q2d^2)         - ...
                    sin(q3)*q3d*(2*q1d + 2*q2d + q3d)                 - ...
                    sin(q2+q3)* (2*q1d*q2d + 2*q1d*q3d + q2d^2 + 2*q2d*q3d + q3d^2) ...
                    ) + ...
                0.5*t*l^2 * ( ...
                    q1dd*(6 + 4*cos(q2) + 4*cos(q3) + 4*cos(q2+q3)) + ...
                    q2dd*(4 + 2*cos(q2) + 4*cos(q3) + 2*cos(q2+q3)) + ...
                    q3dd*(2 +             2*cos(q3) + 2*cos(q2+q3)) - ...
                    2*sin(q2)*    (2*q1d*q2d + q2d^2)               - ...
                    2*sin(q3)*q3d*(2*q1d + 2*q2d + q3d)             - ...
                    2*sin(q2+q3)* (2*q1d*q2d + 2*q1d*q3d + q2d^2 + 2*q2d*q3d + q3d^2) ...
                    ) - ...
                0.5*g*l * ( ...
                    m*(7*cos(q1) + 5*cos(q1+q2) + 3*cos(q1+q2+q3)) + ...
                    t*2*cos(q1+q2+q3)...
                    ) ...
                );
        
        % torque effecting second joint (knee)
        tau_2 = @(q1,q2,q3,q1d,q2d,q3d,q1dd,q2dd,q3dd)( ...
                0.5*m*l^2 * ( ...
                    q1dd*(3   + 3*cos(q2) + 2*cos(q3) + cos(q2+q3)) + ...
                    q2dd*(3   +             2*cos(q3)             ) + ...
                    q3dd*(0.5 +               cos(q3)             ) + ...
                    3*sin(q2)   *q1d^2                              - ...
                      sin(q3)   *(2*q1d*q3d + 2*q2d*q3d + q3d^2)    + ...
                      sin(q2+q3)*q1d^2 ...
                    ) + ...
                0.5*t*l^2 * ( ...
                    q1dd*(4 + 2*cos(q2) + 4*cos(q3) + 2*cos(q2+q3)) + ...
                    q2dd*(4 +             4*cos(q3)               ) + ...
                    q3dd*(2 +             4*cos(q3)               ) + ...
                    2*sin(q2)   *q1d^2                              - ...
                    2*sin(q3)   *(2*q1d*q3d + 2*q2d*q3d + q3d^2)    + ...
                    2*sin(q2+q3)*q1d^2 ...
                    ) - ...
                0.5*g*l * ( ...
                    m*(5*cos(q1+q2) + 3*cos(q1+q2+q3)) + ...
                    t*2*cos(q1+q2+q3)                  + ...
                    8*k*r_pulley^2*(pi + q2) ...
                    ) ...
                );

        % torque effecting third joint (ankle) not relevant because we
        % don't need to control it with a motor
        
        dynamics = {tau_1, tau_2};

    otherwise
        error("get_dynamics() not implemented for joint number <2 and >3.")

end
    